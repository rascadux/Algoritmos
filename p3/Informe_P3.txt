TÍTULO: Práctica 2 de Algoritmos "Ordenación por inserción y ordenación rápida"
AUTOR 1: Luis Brañas Marco        	LOGIN 1: luis.branas
AUTOR 2: Daniel Rodriguez Sanchez	LOGIN 2: daniel.rodriguez.sanchez1
AUTOR 3: Jacobo Iglesias Cibiriain  LOGIN 3: jacobo.iglesias1

GRUPO: 3.1
FECHA: 20/11/2021

---------------------------------------------------------------------------------------------------

1. Características del máquina:

	OS: Ubuntu 20.04.1 LTS
	Kernel: 5.11.0-34-generic
	CPU: Intel Core i7 10750H a 5.0 GHz
	Memoria principal: 32 GB
	Compilador: gcc version 9.3.0

---------------------------------------------------------------------------------------------------

2. Introducción:

	La práctica consiste en comparar el algoritmo de quicksort con diferentes tipos de umbrales
	y vectores con distintas situaciones iniciales (Ascendente, descendente, aleatorio) ademas 
	de asignar distintos tamaños a estos.
	
	Después de programar los algoritmos correspondientes en c y comprobar su funcionamineto 
	procedemos a estudiar su complejidad y valorar su complejidad algorítmica.
	
	Cabe destacar que las mediciónes de los tiempos se van a realizar en microsegundos (µs).

---------------------------------------------------------------------------------------------------

3. Datos:

Ordenacion por insercion con inicializacion ASCENDENTE: 

           n              t(n)          t(n)/n^0.9       t(n)/n^1     t(n)/n^1.10

(*)       500             1.226         0.004565         0.002452         0.001317
(*)      1000             2.491         0.004970         0.002491         0.001248
(*)      2000             5.251         0.005615         0.002626         0.001228
(*)      4000            10.647         0.006101         0.002662         0.001161
(*)      8000            20.821         0.006393         0.002603         0.001060
(*)     16000            40.689         0.006695         0.002543         0.000966
(*)     32000            84.016         0.007408         0.002626         0.000930

Cota subestimada: n^0.9 
Cota ajustada: n^1
Cota sobreestimada: n^1.10

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.0026
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de n
	
----------------------------------------------------------------------------------------------------

Ordenacion por insercion con inicializacion DESCENDENTE: 


           n              t(n)      t(n)/(n^1.8/2)   t(n)/(n^2/2)  t(n)/(n^2.2/2)

(*)       500           236.549         0.006559         0.001892         0.000546
         1000           896.000         0.007134         0.001792         0.000450
         2000          3724.000         0.008515         0.001862         0.000407
         4000         14999.000         0.009849         0.001875         0.000357
         8000         60423.000         0.011394         0.001888         0.000313
        16000        243119.000         0.013165         0.001899         0.000274
        32000        975001.000         0.015162         0.001904         0.000239
        
Cota subestimada: n^1.8/2
Cota ajustada: n^2/2
Cota sobreestimada: n^2.2/2

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.0018
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de n^2/2
	
----------------------------------------------------------------------------------------------------

Ordenacion por insercion con inicializacion ALEATORIA: 


           n              t(n)          t(n)/n^1.8       t(n)/n^2      t(n)/n^2.2

(*)       500           119.812         0.001661         0.000479         0.000138
(*)      1000           485.352         0.001932         0.000485         0.000122
         2000          2094.000         0.002394         0.000503         0.000114
         4000          7665.000         0.002517         0.000479         0.000091
         8000         30806.000         0.002905         0.000481         0.000080
        16000        119916.000         0.003247         0.000478         0.000068
        32000        505530.000         0.003931         0.000494         0.000062
        
Cota subestimada: n^1.8
Cota ajustada: n^2
Cota sobreestimada: n^2.2

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.00049
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de n^2/2
	
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

UMBRAL = 1
Ordenacion por quicksort con inicializacion ASCENDENTE:                                 UMBRAL = 1

           n              t(n)            t(n)/n^1      t(n)/n^1.08      t(n)/n^1.2

(*)       500             9.694         0.019388         0.011793         0.005594
(*)      1000            20.788         0.020788         0.011962         0.005222
(*)      2000            45.012         0.022506         0.012252         0.004921
(*)      4000            98.357         0.024589         0.012664         0.004681
(*)      8000           199.240         0.024905         0.012135         0.004127
(*)     16000           423.046         0.026440         0.012188         0.003815
        32000           890.000         0.027813         0.012129         0.003493
        
Cota subestimada: n
Cota ajustada: n^1.08
Cota sobreestimada: n^1.2

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.012
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de n^1.08
	
----------------------------------------------------------------------------------------------------

Ordenacion por quicksort con inicializacion DESCENDENTE:                                UMBRAL = 1


           n              t(n)            t(n)/n^1      t(n)/n^1.08      t(n)/n^1.2

(*)       500             9.800         0.019600         0.011922         0.005655
(*)      1000            21.806         0.021806         0.012548         0.005477
(*)      2000            47.174         0.023587         0.012841         0.005158
(*)      4000            98.126         0.024532         0.012635         0.004670
(*)      8000           208.005         0.026001         0.012669         0.004309
(*)     16000           434.960         0.027185         0.012531         0.003922
        32000           906.000         0.028313         0.012347         0.003556
        
Cota subestimada: n
Cota ajustada: n^1.08
Cota sobreestimada: n^1.2

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.012
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de n^1.08
	
----------------------------------------------------------------------------------------------------

Ordenacion por quicksort con inicializacion ALEATORIA:                                  UMBRAL = 1


           n              t(n)          t(n)/n^0.9    t(n)/n*log(n)      t(n)/n^1.4

(*)       500            29.253         0.108917         0.009414         0.004871
(*)      1000            63.807         0.127312         0.009237         0.004026
(*)      2000           137.908         0.147456         0.009072         0.003297
(*)      4000           297.725         0.170593         0.008974         0.002697
         8000           628.000         0.192832         0.008735         0.002156
        16000          1333.000         0.219342         0.008606         0.001734
        32000          3089.000         0.272385         0.009306         0.001523
        
Cota subestimada: n^0.9
Cota ajustada: n*log(n)
Cota sobreestimada: n^1.4

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.0090
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de n*log(n) 
	
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

UMBRAL = 10

Ordenacion por quicksort con inicializacion ASCENDENTE:                                UMBRAL = 10

           n              t(n)         t(n)/n^0.95      t(n)/n^1.13     t(n)/n^1.35

(*)       500             5.825         0.015896         0.005193         0.001323
(*)      1000            14.250         0.020129         0.005805         0.001270
(*)      2000            30.947         0.022628         0.005760         0.001082
(*)      4000            66.658         0.025229         0.005669         0.000914
(*)      8000           142.215         0.027862         0.005527         0.000765
(*)     16000           306.655         0.031098         0.005445         0.000647
        32000           654.000         0.034331         0.005306         0.000542


Cota subestimada: n^0.95
Cota ajustada: n^1.13
Cota sobreestimada: n^1.35

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.0054
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de 1.13
	
----------------------------------------------------------------------------------------------------

Ordenacion por quicksort con inicializacion DESCENDENTE:                               UMBRAL = 10

           n              t(n)         t(n)/n^0.95      t(n)/n^1.12     t(n)/n^1.25

(*)       500             6.664         0.018185         0.006322         0.002819
(*)      1000            15.284         0.021589         0.006672         0.002718
(*)      2000            32.892         0.024050         0.006606         0.002459
(*)      4000            70.858         0.026818         0.006548         0.002227
(*)      8000           149.172         0.029225         0.006342         0.001972
(*)     16000           325.557         0.033015         0.006368         0.001809
        32000           677.000         0.035538         0.006093         0.001582


Cota subestimada: n^0.95
Cota ajustada: n^1.12
Cota sobreestimada: n^1.25

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.0063
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de 1.12
	
----------------------------------------------------------------------------------------------------

Ordenacion por quicksort con inicializacion ALEATORIA:                                 UMBRAL = 10

           n              t(n)         t(n)/n^0.95    t(n)/n*log(n^0.97)   t(n)/n^1.3

(*)       500            24.762         0.092196         0.008215         0.007676
(*)      1000            53.955         0.107654         0.008052         0.006793
(*)      2000           120.362         0.128695         0.008162         0.006154
(*)      4000           264.489         0.151549         0.008219         0.005492
         8000           553.000         0.169803         0.007929         0.004663
        16000          1221.000         0.200913         0.008127         0.004182
        32000          2601.000         0.229353         0.008078         0.003618


Cota subestimada: n^0.95
Cota ajustada: n*log(n^0.97)
Cota sobreestimada: n^1.3

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.0081
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de log(n^0.97)

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

UMBRAL = 100                

Ordenacion por quicksort con inicializacion ASCENDENTE:                               UMBRAL = 100

           n              t(n)         t(n)/n^0.95       t(n)/n^1.2     t(n)/n^1.35

(*)       500             3.529         0.005173         0.002037         0.000802
(*)      1000             8.754         0.006197         0.002199         0.000780
(*)      2000            20.141         0.006887         0.002202         0.000704
(*)      4000            45.709         0.007548         0.002175         0.000627
(*)      8000           101.190         0.008070         0.002096         0.000544
(*)     16000           227.184         0.008751         0.002048         0.000480
(*)     32000           495.973         0.009227         0.001947         0.000411


Cota subestimada: n^0.95
Cota ajustada: n^1.2
Cota sobreestimada: n^1.35

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.0020
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de 1.2
	
---------------------------------------------------------------------------------------------------

Ordenacion por quicksort con inicializacion DESCENDENTE:                             UMBRAL = 100

           n              t(n)         t(n)/n^0.95      t(n)/n^1.16     t(n)/n^1.35

(*)       500             3.912         0.010675         0.002895         0.000889
(*)      1000             9.283         0.013113         0.003074         0.000827
(*)      2000            21.796         0.015937         0.003230         0.000762
(*)      4000            48.571         0.018383         0.003221         0.000666
(*)      8000           106.663         0.020897         0.003165         0.000574
(*)     16000           239.049         0.024242         0.003175         0.000505
        32000           521.000         0.027349         0.003096         0.000431


Cota subestimada: n^0.95
Cota ajustada: n^1.16
Cota sobreestimada: n^1.35

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.0031
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de 1.16
	
---------------------------------------------------------------------------------------------------

Ordenacion por quicksort con inicializacion ALEATORIA:                               UMBRAL = 100

           n              t(n)          t(n)/n^0.7    t(n)/n*log(n^0.75) t(n)/n^1.2

(*)       500            28.584         0.106427         0.012265         0.016495
(*)      1000            61.996         0.123698         0.011966         0.015573
(*)      2000           132.703         0.141891         0.011639         0.014509
(*)      4000           296.651         0.169978         0.011922         0.014118
         8000           685.000         0.210334         0.012703         0.014190
        16000          1379.000         0.226911         0.011871         0.012434
        32000          3039.000         0.267976         0.012207         0.011928


Cota subestimada: n^0.7
Cota ajustada: n*log(n^0.75)
Cota sobreestimada: n^1.2

(*) tiempo promedio (en µs) de 1.000 ejecuciones del algoritmo ya que cuando el tiempo 
    es menor de 500 µs, ek tiempo no es significativo y debemos ejecutarlo varias veces.

Observaciones:
	La cota subestima tiende a infinito según vamos aumentado n
	La cota ajustada tiende a estabilizarse alrededor del valor 0.0118
	La cota sobreestimada tiende a 0 según vamos aumentando n
	La complejidad computacional es de n*log(n^0.75)

---------------------------------------------------------------------------------------------------

4.Conclusiones:
	
	Como pudimos comprobar, para casi todos los casos es más rápido el algoritmo de quicksort ya 
	que su complejidad es más baja, sin embargo, esto sucede cuando los vectores son ordenados 
	aleatoria o descendentemente ya que si no, en caso de estar ordenado de forma ascendente,
	el de insercion es el mas veloz.
	
	Si nos centramos en los diversos caso del quicksort (umbral: 1, 10, 100) nos damos cuenta 
	que para los vectores que estan aleatorios el mejor humbral es el de 10 ya que el quicksort
	realiza todo el trabajo pesado (ordeana casi todo el vector) por lo cual cuando pasa el 
	algoritmo de insercion este es muy feloz, como ya hemos explicado previamente.
	Si nos fijamos en los otros casos (ordeando ascendentemente y descendentemenete) nos decatamos
	que el mejor umbral es 100 esto sucede ya que el vector ya queda ordeando tras la primera pasada 
	del quicksort.
	Comentando el umbral uno podemos destacar que es mas rápido que el de insercion cuando el vector 
	es aleatorio pero comparado con los otros umbrales es bastante lento ya que el quicksort empieza 
	a partir el vector en dos recursicvamente hasta el final.
	
	En definitica lo mejor para vectores aleatorios es quicksort con umbral 10, lo mejor para vectores
	ascendentes o descendentes es el algoritmo de insercion pero si hablamos del quicksort seria el que 
	mas umbral tuviera, en este caso umbral 100.
	
    

	
